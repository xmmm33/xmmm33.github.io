<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>学习笔记</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-08-14T03:49:54.134Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>xmmm33</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>初识Spring</title>
    <link href="http://yoursite.com//myblog/2018/08/14/%E5%88%9D%E8%AF%86Spring/"/>
    <id>http://yoursite.com//myblog/2018/08/14/初识Spring/</id>
    <published>2018-08-14T03:49:54.000Z</published>
    <updated>2018-08-14T03:49:54.134Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>初识Hibernate</title>
    <link href="http://yoursite.com//myblog/2018/08/14/%E5%88%9D%E8%AF%86Hibernate/"/>
    <id>http://yoursite.com//myblog/2018/08/14/初识Hibernate/</id>
    <published>2018-08-14T03:49:29.000Z</published>
    <updated>2018-08-14T08:34:53.560Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><hr><h2 id="Hibernate"><a href="#Hibernate" class="headerlink" title="Hibernate"></a>Hibernate</h2><hr><p><strong>什么是hibernate</strong></p><pre><code>hibernate是一个开源的轻量级的框架；它是应用在DAO层的框架，在DAO层里做对数据库的crud操作；其实它的底层代码就是JDBC代码，hibernate就是对它进行了封装；不需要写sql语句实现了。</code></pre><hr><p><strong>hibernate的思想-orm</strong></p><pre><code>object relational mapping，对象关系映射；让我们的一个实体类bean和数据库进行一一的对应；这个对应，即实体类与数据库表名对应；实体类属性和表里的字段一一对应；原始的jdbc代码要像下图这么来写：</code></pre><p><img src="https://i.imgur.com/AnAMoeW.png" alt=""></p><pre><code>而hibernate实现这个操作只需要使用配置文件使实体类与数据库表一一对应起来就行了，不需要操作表，而去操作表对应的实体类对象就行了，在调用hibernate的封装的对象的方法来实现操作；</code></pre><p><img src="https://i.imgur.com/AIwzAbp.png" alt=""></p><hr><p><strong>初识hibernate配置文件</strong></p><pre><code>mapping配置文件命名标准一般为实体类名.hbm.xml；这是一个简单的hibernate xml映射文件；</code></pre><p><img src="https://i.imgur.com/ywY5e2m.png" alt=""><br><img src="https://i.imgur.com/eXhEmLQ.png" alt=""></p><pre><code>hibernate核心配置文件：位置必须在src下面，名称必须为hibernate.cfg.xml跟Struts2类似；在这个文件里面要引入映射文件；结构如下图；</code></pre><p><img src="https://i.imgur.com/iLVmkUS.png" alt=""><br><img src="https://i.imgur.com/cWLXcT9.png" alt=""><br><img src="https://i.imgur.com/xlVDdYW.png" alt=""></p><hr><p><strong>hibernate核心api</strong></p><pre><code>Configuration对象就是加载核心配置文件;使用Configuration的对象可以创建sessionFactory对象；根据核心配置文件到数据库中把表创建出来；创建sessionFactory的过程中，特别耗费资源；session：类似于jdbc中的Connection；里面有多个方法，实现crud操作；session是单线程对象，不能共用；Transaction事务对象，主要两个操作，事务提交和回滚；事务的四个特性：原子性、一致性、隔离性、持久性（简称ACID）；事务是应用程序中一系列严密的操作，所有操作必须成功完成，否则在每个操作中所作的所有更改都会被撤消。</code></pre><ul><li>原子性：也就是指一个事务中的一系列操作要么全部成功，要么一个都不做，不能只执行其中一部分操作；</li></ul><ul><li>一致性：就是指事务执行的结果必须是使数据库从一个一致性状态变到另一个一致性状态，换句话说就是数据库只包含成功提交事务的结果时，就说数据库处于一致性状态</li></ul><ul><li>隔离性：即一个事务内部的操作对于其他并发的事务是隔离的、不影响的；</li></ul><ul><li>持久性：指一个事务一旦提交了，它对数据库中的数据的改变就是永久性的，即使系统崩溃，修改的数据也不会丢失；</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
    
      <category term="学习日记" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Struts2初级应用</title>
    <link href="http://yoursite.com//myblog/2018/08/13/Struts2%E5%88%9D%E7%BA%A7%E5%BA%94%E7%94%A8/"/>
    <id>http://yoursite.com//myblog/2018/08/13/Struts2初级应用/</id>
    <published>2018-08-13T01:26:48.000Z</published>
    <updated>2018-08-13T08:29:43.430Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><hr><h2 id="结果页面的配置"><a href="#结果页面的配置" class="headerlink" title="结果页面的配置"></a>结果页面的配置</h2><p><strong>全局结果页面配置</strong></p><pre><code>全局结果页面的配置，这个的出现是因为当有两个或多个action的返回值相同，并且转到的页面也相同的时候，单独使用常规配置是能完成功能实现的，但这样会造成重复的代码出现；所以这时候就需要配置全局结果页面，使用到的标签为&lt;global-result&gt;&lt;/global-result&gt;；在这个标签里面写入result标签，把多个具有相同返回值的action并且转到的页面是相同的多行代码，写入一行就行了，其他action中的result标签就可以注释掉了，减少了重复的代码出现，如下图；</code></pre><p><img src="https://i.imgur.com/U5fdFIn.png" alt=""></p><hr><p><strong>局部结果页面配置</strong></p><pre><code>当配置了全局结果页面和局部结果页面时，而且具有相同的返回值的时候，这时候以局部结果页面配置为准；</code></pre><p><strong>Result标签中的type属性</strong></p><pre><code>这个type属性是配置是定义我们如何到对应的页面当中去；默认值为请求转发；dispatcher还有一个值是redirect，重定向地址栏会发生变化，相当于两次请求；上面的这两个值是配置到某个页面的用法，但我们在开发用需要配置到其他action；分别为chain和redirectAction；第一个一般不用；redirectAction：重定向到另一个action；</code></pre><hr><p><strong>Action获取表单获取的数据</strong></p><pre><code>在servlet中，使用的request对象来获取；action中没有直接引入request对象，我们需要来手动获取；有三种方式：1.使用ActionContext类 2.使用ServletActionContext类3使用接口注入的方式；ActionContext：先使用ActionContext.getContext方法获取到ActionContext对象，               再使用 对象.getParameters方法，返回一个map，这个map中的key为               表单输入项中的name属性值，value为你输入的值；</code></pre><p><img src="https://i.imgur.com/1UpFnKE.png" alt=""></p><pre><code>ServletActionContext：使用ServletActionContext.getRequest方法获取request                      对象，然后使用request的getParameter方法来获取表单数据</code></pre><p><img src="https://i.imgur.com/9EmpuOK.png" alt=""></p><p><img src="https://i.imgur.com/iZ9WGF8.png" alt=""></p><pre><code>使用接口注入方式（不常用）：让你的action实现ServletRequestAware接口，得到request对象，后面操作同上；</code></pre><p><img src="https://i.imgur.com/zDo4DBX.png" alt=""></p><hr><p><strong>Struts2提供的封装获取表单数据的方式</strong></p><pre><code>原始方式如图：</code></pre><p><img src="https://i.imgur.com/nJo4VDd.png" alt=""></p><p><strong>属性封装</strong></p><pre><code>直接把表单提交的属性封装到action的属性里面；在action成员变量的位置定义变量，变量名称和表单的name属性值相同，然后生成get、set方法，这个方法的方便之处就是在获取数据的时候方便，但要放入对象中去的时候，还是要写必要的代码。</code></pre><p><strong>模型驱动封装方式</strong></p><pre><code>直接把数据封装到实体类对象当中去；接口中泛型为实体类的名称；手动常见实体类对象，然后返回创建的实体类对象；前提要求是表单里的name属性值要和实体类中的属性名称一样；这个方法在开发中是最常用的；其底层还是用的原始方式；</code></pre><p><img src="https://i.imgur.com/v74Wzyw.png" alt=""></p><pre><code>注意：不能同时使用上两种方式操作同一个表单数据，如果同时使用，会使用模型驱动封装；</code></pre><p><img src="https://i.imgur.com/7cinqKQ.png" alt=""></p><p><strong>表达式封装</strong></p><pre><code>也可以直接把表单数据封装到实体类中；在action中声明实体类，生成这个实体类变变量的get、set方法，在表单输入项name属性处输入表达式形式；如下图；</code></pre><p><img src="https://i.imgur.com/LTLLv7Y.png" alt=""><br><img src="https://i.imgur.com/Xv71bGE.png" alt=""><br><img src="https://i.imgur.com/a3ekik7.png" alt=""></p><hr><p><strong>封装数据到List集合</strong></p><pre><code>在action中声明List，生成list的get、set方法，在表单输入项中写表达式；用的比较少；</code></pre><p><strong>封装数据到Map集合</strong></p><pre><code>在action中声明map，生成map的get、set方法，在表单输入项中写表达式；也用的比较少；</code></pre><hr><h2 id="值栈"><a href="#值栈" class="headerlink" title="值栈"></a>值栈</h2><p><strong>OGNL概述</strong></p><pre><code>EL表达式可以在jsp中获取域对象里面的值；OGNL表达式更强大了；在struts2里面操作值栈数据，一般与struts2标签一起使用；OGNL不是struts2的一部分，但常和struts2一起来使用；引入标签库，如图</code></pre><p><img src="https://i.imgur.com/lfz2CqW.png" alt=""></p><pre><code>例子计算一个字符串长度；如图；value里面的值就是ognl表达式；</code></pre><p><img src="https://i.imgur.com/44aj3zI.png" alt=""></p><p><strong>什么是值栈</strong></p><pre><code>在struts2里面提供本身一种存储机制，类似于域对象，是值栈，可以存值取值；在action里面可以把数据放到值栈里面，在页面中获取到值栈数据；servlet和action的区别，servlet默认在第一次访问的时候创建，创建一次，单实例对象；action访问时创建，每次访问action的时候都会创建action对象，创建多次，多实例对象；每次访问action的时候，都会创建action对象，在每个对象里面都会有一个值栈对象，就相当于说值栈存储于每个action里面；</code></pre><hr><p><strong>如何获取到值栈对象</strong></p><pre><code>使用ActionContext类里面的方法得到值栈对象；这是最常用的方式；使用方式如下图；</code></pre><p><img src="https://i.imgur.com/jS1Mb0M.png" alt=""><br>    每个action对象里面只有一个值栈对象；</p><hr><p><strong>值栈内部结构</strong></p><pre><code>值栈分为两部分 1.root 本身结构是list集合 2.context 本身结构是map集合；</code></pre><p><img src="https://i.imgur.com/Ke0nm9v.png" alt=""></p><pre><code>一般操作的都是root里面的数据；可以在jsp页面中使用debug标签来查看值栈的内部结构；</code></pre><hr><p><strong>向值栈放数据</strong></p><pre><code>有多种方式，可以调用值栈对象的set和push方法；但是主要采用的是在action定义变量，生成变量的get方法，如下图：</code></pre><p><img src="https://i.imgur.com/CuTJpu6.png" alt=""><br><img src="https://i.imgur.com/bwNxjLX.png" alt=""></p><pre><code>注意：如果采用值栈对象的set和push方法来存储数据，会重新分配空间，而第三种方式是直接在你的action中存储，相对于前面两种方式，可以节约存储空间；</code></pre><p><strong>向值栈中放对象</strong></p><pre><code>实现步骤，首先定义对象，然后生成对象的get方法，最后在执行的方法中来对对象进行赋值；</code></pre><p><img src="https://i.imgur.com/Z0BvsWq.png" alt=""></p><p><strong>向值栈中放List集合</strong></p><pre><code>实现步骤，定义list集合变量，生成变量的get方法，在执行的方法中对对象进行赋值；</code></pre><p><img src="https://i.imgur.com/2rBXMLp.png" alt=""></p><hr><p><strong>从值栈中取数据</strong></p><pre><code>- 获取字符串：使用struts2标签和ognl表达式获取值栈数据；           &lt;s:property value=&quot;ognl表达式&quot;/&gt;;           其中value的值为字符串对象变量的名称；</code></pre><p><img src="https://i.imgur.com/hOeH2YQ.png" alt=""></p><pre><code>- 获取对象：</code></pre><p><img src="https://i.imgur.com/MDLpZVc.png" alt=""></p><pre><code>- 获取List集合：第一种方式：</code></pre><p><img src="https://i.imgur.com/okPC6gP.png" alt=""></p><pre><code>- 第二种方式：</code></pre><p><img src="https://i.imgur.com/xRtu5yA.png" alt=""></p><pre><code>- 第三种方式：最常用的方式，它会在context中分配一个临时空间给list             key为var的值；</code></pre><p><img src="https://i.imgur.com/QvduGZV.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
    
      <category term="学习日记" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>初识Struts2</title>
    <link href="http://yoursite.com//myblog/2018/08/10/%E5%88%9D%E8%AF%86Struts2/"/>
    <id>http://yoursite.com//myblog/2018/08/10/初识Struts2/</id>
    <published>2018-08-10T06:45:19.000Z</published>
    <updated>2018-08-10T10:30:14.332Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><hr><h2 id="Srtuts2运行基本流程"><a href="#Srtuts2运行基本流程" class="headerlink" title="Srtuts2运行基本流程"></a>Srtuts2运行基本流程</h2><pre><code>首先客户端初始化一个指向Servlet的容器的请求，常用的容器就是Tomcat，请求被提交到一系列的过滤器中；过滤器获取到请求路径，通过寻找src下面的Struts.xml核心配置文件来找到需要调用的Action类，这里解析Struts.xml文件是通过dom4j技术来解析的；这里获取对应的Action类的时候采用的是反射机制来实现的，然后得到相应的类的方法，调用方法后得到一个返回值，再到struts.xml配置文件中找到对应的result，然后跳转到对应页面。一个浅显的认识。</code></pre><hr><h2 id="Srtuts2核心配置文件（主要的标签和属性）"><a href="#Srtuts2核心配置文件（主要的标签和属性）" class="headerlink" title="Srtuts2核心配置文件（主要的标签和属性）"></a>Srtuts2核心配置文件（主要的标签和属性）</h2><pre><code>struts.xml是Struts2的核心配置文件，它主要负责管理应用中的Action的映射，以及该Action包含的Result定义等；这里说一下struts.xml文件中的主要的标签和标签的属性的意义；1.首先是**&lt;struts&gt;&lt;/struts**&gt;标签，该标签是配置文件根标签。2.**&lt;package&gt;&lt;/package&gt;**该标签使用包机制来解决同名action的兼容问题，里面有三个属性，name属性可以根据自己来定义，extends一般是默认值struts-defalut，表示继承这个包，namespace属性设置包的命令空间，一般为“ / &quot;;与action标签的name属性组成网页访问地址，例如下图，如果要访问地址就是localhost：8080/yourProject/login.action；</code></pre><p><img src="https://i.imgur.com/DAHYijO.png" alt=""></p><pre><code>3.**&lt;action&gt;&lt;/action&gt;**,name属性表示被请求action的名字，也是根据自己的需求来取，没有特定的要求；class属性为你的action类的具体路径，method属性为当你的一个action有多个方法，你要调用某一个方法的时候，就根据这个属性来判断；但是这种方法有一个局限性，就是当一个action类中的方法特别多的时候，就需要写非常多的action标签；因此这里可以采用通配符的方法来实现action的不同方法的访问；相比较而且这种方式是被采用的更多的；4.&lt;result&gt;&lt;/result&gt;标签，name属性为action类中的某一个方法的返回值，如果匹配成攻，则控制页面进行对应的跳转，这也就是这个标签的主要作用，type属性表示页面跳转采用的方式，默认为请求转发方式，还可以选择重定向方式来进行页面的跳转；</code></pre><hr><h2 id="Srtuts2常量配置"><a href="#Srtuts2常量配置" class="headerlink" title="Srtuts2常量配置"></a>Srtuts2常量配置</h2><pre><code>在struts2中配置常量的方式有三种，在strucs.xml文件中配置，在web.xml文件中配置，在struts.propreties文件中配置；通常采用struts.xml文件中进行配置，便于集中的管理；一般常用的常量配置如下图；</code></pre><p><img src="https://i.imgur.com/7pcDb7j.png" alt=""></p><hr><h2 id="Srtuts2分模块开发"><a href="#Srtuts2分模块开发" class="headerlink" title="Srtuts2分模块开发"></a>Srtuts2分模块开发</h2><pre><code>可以单独写配置文件，把配置文件引入到核心配置文件中；意思就是一个在src中的struts.xml文件中不进行相应的标签声明，而是在相应的action类包中引入一个.xml文件，文件头部跟struts.xml文件的一样，然后你在这个文件中进行相应的配置；最后在struts.xml文件通过include标签对这个xml文件进行引入；</code></pre><hr><h2 id="Srtuts2中Action的编写方式"><a href="#Srtuts2中Action的编写方式" class="headerlink" title="Srtuts2中Action的编写方式"></a>Srtuts2中Action的编写方式</h2><pre><code>action编写有三种方式；</code></pre><p>1.创建普通类，不继承任何类，不实现任何接口；<br><img src="https://i.imgur.com/uxGQsle.png" alt=""></p><p>2.创建类，实现Action接口，很少用；<br><img src="https://i.imgur.com/njl3rkT.png" alt=""></p><p>3.创建类，继承类ActionSupport，最常用的方式，看ActionSupport的源码发现其实它已经实现了Action接口；<br><img src="https://i.imgur.com/v0jfQ1x.png" alt=""></p><hr><h2 id="Srtuts2中Action的不同方法的访问方式"><a href="#Srtuts2中Action的不同方法的访问方式" class="headerlink" title="Srtuts2中Action的不同方法的访问方式"></a>Srtuts2中Action的不同方法的访问方式</h2><pre><code>有三种访问方式；1.使用action的标签的method属性，在这个属性里面执行action方法；              2.使用通配符方式实现，开发中常用的方式，如下图，在其中method属性              的写法为{1}中间的数据根据name属性中的*号的个数来决定的，学过java              基础的不难理解；</code></pre><p><img src="https://i.imgur.com/GbVhFX3.png" alt=""></p><pre><code>3.动态访问实现（不常用）；</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
    
      <category term="学习日记" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Linux压缩解压命令</title>
    <link href="http://yoursite.com//myblog/2018/08/09/Linux%E5%8E%8B%E7%BC%A9%E8%A7%A3%E5%8E%8B%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com//myblog/2018/08/09/Linux压缩解压命令/</id>
    <published>2018-08-09T11:31:01.000Z</published>
    <updated>2018-08-09T11:51:44.454Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><hr><p>在Linux中的压缩格式.gz，对应的命令<strong>gzip</strong></p><pre><code>语法：gzip 【文件名】注意：只能压缩文件！</code></pre><p><img src="https://i.imgur.com/O4qa4TH.png" alt=""></p><p>解压缩文件命令：<strong>gunzip</strong></p><pre><code>语法：gunzip 【文件名】 等同于 gzip -d；</code></pre><p><img src="https://i.imgur.com/FF3yqqt.png" alt=""></p><hr><p>压缩目录：<strong>tar</strong></p><pre><code>语法：tar -【cvfz】 【压缩后的文件名】 【被压缩目录】注意：压缩后的格式为.tar.gz； -z表示在打包的时候同时生成压缩文件。     一般使用tar -cjf；    </code></pre><p><img src="https://i.imgur.com/4a9W26u.png" alt=""></p><p>解压目录：<strong>tar</strong></p><pre><code>语法：tar -【zxvf】 【压缩后的文件名】 【被压缩目录】一般使用tar -xjf；</code></pre><hr><p>另一种压缩格式.zip，对应的命令为<strong>zip</strong></p><pre><code>语法：zip 选项【-r】 【压缩后的文件名】 【被压缩目录或文件】；-r表示压缩目录</code></pre><p><img src="https://i.imgur.com/oyy0lTv.png" alt=""></p><p>对应的解压缩命令：<strong>unzip</strong></p><pre><code>语法：unzip 【压缩文件】</code></pre><hr><p>还有一种压缩格式.bz2，对应命令为<strong>bzip2</strong></p><pre><code>语法：bzip2 【-k】 【文件】；-k表示压缩文件后保留原文件</code></pre><p>对应的解压缩命令为：<strong>bunzip2</strong></p><pre><code>语法：bunzip2 【-k】 【压缩文件】；-k表示解压缩之后保留原文件</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
    
      <category term="学习日记" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Linux文件搜索命令</title>
    <link href="http://yoursite.com//myblog/2018/08/09/Linux%E6%96%87%E4%BB%B6%E6%90%9C%E7%B4%A2%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com//myblog/2018/08/09/Linux文件搜索命令/</id>
    <published>2018-08-09T08:42:33.000Z</published>
    <updated>2018-08-09T11:27:42.942Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><hr><p>文件搜索命令：<strong>find</strong></p><pre><code>语法：find 【搜索范围】 【匹配条件】     find -name 根据文件名字搜索     注意如果文件名中包含你的*name* 都会搜索出来     *号相当于通配符，匹配任意个数字符     ？号匹配单个任意字符     find -iname不区分大小写查找文件     注意：在搜索的时候，条件越精确越好，节省资源     find -size【+-】 在目录下根据文件大小来查找文件     find -home根据所有者查找     find -group根据所属组查找     find -amin查找5分钟内被修改过访问时间属性的文件和目录     find -size 【条件】 -a 【条件】 -a表示条件连接，必须两个     件同时满足，-o是只用满足某一个条件</code></pre><p><img src="https://i.imgur.com/rXhDT5D.png" alt=""><br><img src="https://i.imgur.com/s2IFydr.png" alt=""><br><img src="https://i.imgur.com/9H81QIZ.png" alt=""></p><p>文件搜索命令：<strong>loacte</strong></p><pre><code>在文件资料库中寻找文件语法：locate 【文件名】，搜索速度快，但locate不能实时查找，要想实时查找必须实时     更新资料库；</code></pre><p>文件搜索命令：<strong>which</strong></p><pre><code>查找命令所在的目录及别名语法：which 【命令名】</code></pre><p><img src="https://i.imgur.com/APIAH4m.png" alt=""></p><p>文件搜素命令：<strong>whereis</strong></p><pre><code>查找命令所在目录及帮助文档路径语法：whereis 【命令名】</code></pre><p>文件搜素命令：<strong>grep</strong></p><pre><code>在文件内容中进行字串匹配的查找语法：grep 【关键词】 【文件名】注意：grep -i 【关键词】 【文件名】 不区分大小写查询     grep -v排除指定字串；经常使用的命令</code></pre><p><img src="https://i.imgur.com/JkAGzXG.png" alt=""></p><p>帮助命令：<strong>man</strong></p><pre><code>查看命令的详细信息语法：man 【命令名】</code></pre><p>帮助命令：<strong>help</strong></p><pre><code>查看内置命令的详细信息语法：help 【命令名】</code></pre><p>添加新用户：<strong>useradd</strong></p><pre><code>语法：useradd 【用户名】</code></pre><p><img src="https://i.imgur.com/hqvxnCm.png" alt=""></p><p>设置用户密码：<strong>passwd</strong></p><pre><code>语法：passwd 【用户名】</code></pre><p><img src="https://i.imgur.com/x83ilxa.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
    
      <category term="学习日记" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Linux文件处理命令</title>
    <link href="http://yoursite.com//myblog/2018/08/09/linux%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com//myblog/2018/08/09/linux命令/</id>
    <published>2018-08-09T08:36:48.000Z</published>
    <updated>2018-08-09T08:40:00.664Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><hr><p>显示目录文件命令：<strong>ls(list)</strong></p><pre><code>命令所在路径/bin/ls，执行权限所有用户都可以；语法：ls 【选项 -a -l -d -lh】 【文件目录】-a的意思是显示所有文件，包括隐藏文件；-l是显示详细信息；-d仅显示目录名；-lh显示通俗易懂的；注意：在linux里面要想隐藏一个文件，就只有重命名，改成.开头的文件名格式；</code></pre><p><img src="https://i.imgur.com/AF2nIKP.png" alt=""></p><pre><code>如上图，以.开头的文件都是隐藏文件，使用ls命令是看不到的，只有ls -a才能看到这些藏文件；-l就是显示文件的详细信息，可以看到第一行 drwxr-xr-x 这样的一个字段这个字段标识u、g、o三类用户对这个文件拥有的权限。</code></pre><p>创建目录命令：<strong>mkdir(make directories)</strong></p><pre><code>命令所在路径/bin/mkdir；执行权限所有用户；功能就是创建新目录；可以一次创建单个目录或多个目录；例如mkdir /tmp/test01/a.txt或者mkdir /tmptest01/b.txt /tmp/test01/c.txt;</code></pre><p><img src="https://i.imgur.com/3hJCh5j.png" alt=""></p><p>切换目录命令：<strong>cd(change directory)</strong></p><pre><code>命令的功能就是进行目录的切换；切换到指定目录：cd /tmp/vae回到上一级目录：cd .. 还是在当前目录：cd .返回上两级目录：cd ../..返回进入此目录之前所在的目录：cd -</code></pre><p><img src="https://i.imgur.com/IC6fwSY.png" alt=""></p><p>显示当前目录命令：<strong>pwd(print working directory)</strong></p><pre><code>用法就是直接在当前目录下使用pwd</code></pre><p><img src="https://i.imgur.com/6q6fh6B.png" alt=""></p><p>删除空目录命令：<strong>rmdir(remove empty directory)</strong></p><pre><code>功能是删除指定空目录，但如果目录下有文件是不能删除的；</code></pre><p><img src="https://i.imgur.com/b5GbuCb.png" alt=""></p><p>目录复制命令：<strong>cp</strong></p><pre><code>语法：cp 【源文件目录】 【目标文件目录】；-p：保留文件属性linux在复制的过程中可以同时改变文件的名称；</code></pre><p><img src="https://i.imgur.com/AI04nIB.png" alt=""></p><p>目录剪切和更名命令：<strong>mv</strong></p><pre><code>语法：mv 【源文件目录】 【目标文件目录】；在同一个目录下面进行mv操作 就是进行文件重命名；</code></pre><p><img src="https://i.imgur.com/J8wZM5Z.png" alt=""></p><p>文件删除命令：<strong>rm</strong></p><pre><code>语法：rm 【文件名】；     rm -f 表示强制删除文件     rm -rf 表示强制删除一个目录注意：在删除任何文件前，都做好备份工作</code></pre><p>文件创建命令：<strong>touch</strong></p><pre><code>语法：在当前目录下，直接touch 【想创建的文件名】注意：不建议在linux文件名字中使用空格等特殊符号，这会引起后续操作的麻烦</code></pre><p>文件浏览命令：<strong>cat</strong></p><pre><code>语法：cat 【目标文件路径】可以用tac命令；倒着显示；</code></pre><p>长文件浏览命令：<strong>more</strong></p><pre><code>语法：more 【文件目录】然后按空格或f进行翻页，按回车进行换行，按q或Q推出浏览状态，但不能向上翻页</code></pre><p>长文件浏览命令：<strong>less</strong></p><pre><code>语法：less 【文件名】功能跟more一样，还能向上翻页，还能进行搜索</code></pre><p>看前几行浏览命令：<strong>head</strong></p><pre><code>语法：head -n 【文件名】；n表示你要显示的行数</code></pre><p><img src="https://i.imgur.com/FlaS2pL.png" alt=""></p><p>看最后几行浏览命令：<strong>tail</strong></p><pre><code>语法：tail -n 【文件名】     tail -f 【文件名】动态显示文件末尾内容，多用于查看服务器log记录</code></pre><p>链接命令：<strong>ln</strong></p><pre><code>语法：ln -s 【源文件】 【目标文件】</code></pre><p><img src="https://i.imgur.com/DLOxoPB.png" alt=""></p><pre><code>只要看到第一个字段以l开头，就说明这是一个软链接文件，类似windows系统中的快捷方式软链接文件前面的用户权限全部为rwx；</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
    
      <category term="学习日记" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Linux权限管理命令</title>
    <link href="http://yoursite.com//myblog/2018/08/09/Linux%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com//myblog/2018/08/09/Linux权限管理命令/</id>
    <published>2018-08-09T08:36:48.000Z</published>
    <updated>2018-08-09T08:40:59.852Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><hr><p>权限管理命令：<strong>chmod</strong></p><pre><code>执行权限是所有用户；语法：chmod 【{ugoa}{+-=}{rwx}】 【文件目录】</code></pre><p><img src="https://i.imgur.com/HqbE6oZ.png" alt=""></p><pre><code>注意：chmod -R递归修改；改变某一个目录下以及这个目录下的所文件的权限</code></pre><hr><p>改变文件或目录的所有者：<strong>chown</strong></p><pre><code>语法：chown 【用户】 【文件或目录】</code></pre><p><img src="https://i.imgur.com/7aQJkyx.png" alt=""></p><pre><code>注意：改变的用户必须是系统里面有的用户角色</code></pre><hr><p>改变文件或目录的所属组：<strong>chgrp</strong></p><pre><code>语法：chgrp 【用户组】 【文件或目录】</code></pre><hr><p>显示、设置文件的缺省权限：<strong>umask</strong></p><pre><code>语法：umask -S</code></pre><p><img src="https://i.imgur.com/6b5hPvu.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
    
      <category term="学习日记" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
</feed>
